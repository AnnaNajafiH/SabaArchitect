import { Router, Request, Response } from 'express';
import { Project } from '../models';
import { IProject } from '../models/Project';
import { body, validationResult, query } from 'express-validator';

const router = Router();

// Validation rules for project creation
const projectValidation = [
  body('title')
    .trim()
    .isLength({ min: 3, max: 200 })
    .withMessage('Title must be between 3 and 200 characters'),
  
  body('description')
    .trim()
    .isLength({ min: 10, max: 500 })
    .withMessage('Description must be between 10 and 500 characters'),
  
  body('category')
    .isIn(['residential', 'commercial', 'interior', 'landscape', 'renovation'])
    .withMessage('Category must be one of: residential, commercial, interior, landscape, renovation'),
  
  body('location')
    .trim()
    .isLength({ min: 2, max: 200 })
    .withMessage('Location must be between 2 and 200 characters'),
  
  body('year')
    .isInt({ min: 1900, max: new Date().getFullYear() + 5 })
    .withMessage('Year must be a valid year'),
  
  body('status')
    .isIn(['completed', 'in-progress', 'planning', 'on-hold'])
    .withMessage('Status must be one of: completed, in-progress, planning, on-hold'),
  
  body('images')
    .isArray({ min: 1 })
    .withMessage('At least one image is required'),
  
  body('thumbnailImage')
    .isURL()
    .withMessage('Thumbnail image must be a valid URL'),
  
  body('tags')
    .optional()
    .isArray()
    .withMessage('Tags must be an array')
];

// GET /api/v1/projects - Get all projects with filtering and pagination
router.get('/', async (req: Request, res: Response) => {
  try {
    const { 
      category, 
      status, 
      featured, 
      published = 'true',
      year,
      page = 1, 
      limit = 12,
      sort = '-year'
    } = req.query;

    // Build query
    let query: any = {};
    
    // Only show published projects by default (unless explicitly requested otherwise)
    if (published !== 'all') {
      query.published = published === 'true';
    }
    
    if (category && typeof category === 'string') {
      query.category = category;
    }
    
    if (status && typeof status === 'string') {
      query.status = status;
    }
    
    if (featured !== undefined) {
      query.featured = featured === 'true';
    }
    
    if (year && typeof year === 'string') {
      query.year = parseInt(year);
    }

    // Calculate pagination
    const pageNum = Math.max(1, parseInt(page as string));
    const limitNum = Math.min(50, Math.max(1, parseInt(limit as string)));
    const skip = (pageNum - 1) * limitNum;

    // Parse sort parameter
    let sortObj: any = {};
    if (typeof sort === 'string') {
      const sortField = sort.startsWith('-') ? sort.slice(1) : sort;
      const sortOrder = sort.startsWith('-') ? -1 : 1;
      sortObj[sortField] = sortOrder;
    }

    // Get projects with pagination
    const projects = await Project.find(query)
      .sort(sortObj)
      .skip(skip)
      .limit(limitNum)
      .select('-__v');

    // Get total count for pagination
    const total = await Project.countDocuments(query);

    // Get category counts for filtering
    const categoryStats = await Project.aggregate([
      { $match: { published: true } },
      { $group: { _id: '$category', count: { $sum: 1 } } },
      { $sort: { _id: 1 } }
    ]);

    res.json({
      status: 'success',
      message: 'Projects retrieved successfully',
      data: {
        projects,
        pagination: {
          page: pageNum,
          limit: limitNum,
          total,
          pages: Math.ceil(total / limitNum)
        },
        stats: {
          categories: categoryStats
        }
      }
    });

  } catch (error) {
    console.error('Get projects error:', error);
    res.status(500).json({
      status: 'error',
      message: 'Unable to retrieve projects',
      data: null
    });
  }
});

// GET /api/v1/projects/featured - Get featured projects
router.get('/featured', async (req: Request, res: Response) => {
  try {
    const { limit = 6 } = req.query;
    const limitNum = Math.min(20, Math.max(1, parseInt(limit as string)));

    const projects = await Project.findFeatured()
      .limit(limitNum)
      .select('-__v');

    res.json({
      status: 'success',
      message: 'Featured projects retrieved successfully',
      data: { projects }
    });

  } catch (error) {
    console.error('Get featured projects error:', error);
    res.status(500).json({
      status: 'error',
      message: 'Unable to retrieve featured projects',
      data: null
    });
  }
});

// GET /api/v1/projects/search - Search projects
router.get('/search', async (req: Request, res: Response) => {
  try {
    const { q, page = 1, limit = 12 } = req.query;

    if (!q || typeof q !== 'string') {
      return res.status(400).json({
        status: 'error',
        message: 'Search query is required',
        data: null
      });
    }

    // Calculate pagination
    const pageNum = Math.max(1, parseInt(page as string));
    const limitNum = Math.min(50, Math.max(1, parseInt(limit as string)));
    const skip = (pageNum - 1) * limitNum;

    // Create search query
    const searchQuery = {
      published: true,
      $or: [
        { title: { $regex: q, $options: 'i' } },
        { description: { $regex: q, $options: 'i' } },
        { location: { $regex: q, $options: 'i' } },
        { tags: { $in: [new RegExp(q, 'i')] } }
      ]
    };

    const projects = await Project.find(searchQuery)
      .sort({ year: -1, createdAt: -1 })
      .skip(skip)
      .limit(limitNum)
      .select('-__v');

    const total = await Project.countDocuments(searchQuery);

    return res.json({
      status: 'success',
      message: 'Search results retrieved successfully',
      data: {
        projects,
        pagination: {
          page: pageNum,
          limit: limitNum,
          total,
          pages: Math.ceil(total / limitNum)
        },
        query: q
      }
    });

  } catch (error) {
    console.error('Search projects error:', error);
    return res.status(500).json({
      status: 'error',
      message: 'Unable to search projects',
      data: null
    });
  }
});

// GET /api/v1/projects/:id - Get project by ID or slug
router.get('/:identifier', async (req: Request, res: Response) => {
  try {
    const { identifier } = req.params;
    
    // Try to find by ID first, then by slug
    let project = await Project.findById(identifier).select('-__v') as IProject | null;
    
    if (!project) {
      project = await Project.findOne({ slug: identifier, published: true }).select('-__v') as IProject | null;
    }
    
    if (!project) {
      return res.status(404).json({
        status: 'error',
        message: 'Project not found',
        data: null
      });
    }
    
    // Get related projects (same category, excluding current project)
    const relatedProjects = await Project.find({
      category: project.category,
      published: true,
      _id: { $ne: project._id }
    })
    .limit(4)
    .select('title slug thumbnailImage category year')
    .sort({ year: -1 });

    return res.json({
      status: 'success',
      message: 'Project retrieved successfully',
      data: {
        project,
        related: relatedProjects
      }
    });

  } catch (error) {
    console.error('Get project error:', error);
    
    // Handle invalid ObjectId
    if (error && typeof error === 'object' && 'name' in error && (error as any).name === 'CastError') {
      return res.status(404).json({
        status: 'error',
        message: 'Project not found',
        data: null
      });
    }
    
    return res.status(500).json({
      status: 'error',
      message: 'Unable to retrieve project',
      data: null
    });
  }
});

// POST /api/v1/projects - Create new project (admin only)
router.post('/', projectValidation, async (req: Request, res: Response) => {
  try {
    // Check for validation errors
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        status: 'error',
        message: 'Validation failed',
        data: {
          errors: errors.array()
        }
      });
    }

    const projectData = req.body;
    
    // Create new project
    const project = new Project(projectData);
    const savedProject = await project.save();

    return res.status(201).json({
      status: 'success',
      message: 'Project created successfully',
      data: { project: savedProject }
    });

  } catch (error) {
    console.error('Create project error:', error);
    
    // Handle duplicate slug
    if (error && typeof error === 'object' && 'code' in error && (error as any).code === 11000) {
      return res.status(400).json({
        status: 'error',
        message: 'A project with this title already exists',
        data: null
      });
    }
    
    return res.status(500).json({
      status: 'error',
      message: 'Unable to create project',
      data: null
    });
  }
});

// PUT /api/v1/projects/:id - Update project (admin only)
router.put('/:id', projectValidation, async (req: Request, res: Response) => {
  try {
    // Check for validation errors
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        status: 'error',
        message: 'Validation failed',
        data: {
          errors: errors.array()
        }
      });
    }

    const { id } = req.params;
    const updateData = req.body;

    const project = await Project.findByIdAndUpdate(
      id,
      updateData,
      { new: true, runValidators: true }
    ).select('-__v');

    if (!project) {
      return res.status(404).json({
        status: 'error',
        message: 'Project not found',
        data: null
      });
    }

    res.json({
      status: 'success',
      message: 'Project updated successfully',
      data: { project }
    });

  } catch (error) {
    console.error('Update project error:', error);
    
    // Handle invalid ObjectId
    if (error.name === 'CastError') {
      return res.status(404).json({
        status: 'error',
        message: 'Project not found',
        data: null
      });
    }
    
    // Handle duplicate slug
    if (error.code === 11000) {
      return res.status(400).json({
        status: 'error',
        message: 'A project with this title already exists',
        data: null
      });
    }
    
    res.status(500).json({
      status: 'error',
      message: 'Unable to update project',
      data: null
    });
  }
});

// PATCH /api/v1/projects/:id/toggle-featured - Toggle featured status (admin only)
router.patch('/:id/toggle-featured', async (req: Request, res: Response) => {
  try {
    const { id } = req.params;

    const project = await Project.findById(id);
    
    if (!project) {
      return res.status(404).json({
        status: 'error',
        message: 'Project not found',
        data: null
      });
    }

    await project.toggleFeatured();

    res.json({
      status: 'success',
      message: `Project ${project.featured ? 'marked as featured' : 'unmarked as featured'}`,
      data: { project }
    });

  } catch (error) {
    console.error('Toggle featured error:', error);
    res.status(500).json({
      status: 'error',
      message: 'Unable to toggle featured status',
      data: null
    });
  }
});

// PATCH /api/v1/projects/:id/toggle-published - Toggle published status (admin only)
router.patch('/:id/toggle-published', async (req: Request, res: Response) => {
  try {
    const { id } = req.params;

    const project = await Project.findById(id);
    
    if (!project) {
      return res.status(404).json({
        status: 'error',
        message: 'Project not found',
        data: null
      });
    }

    await project.togglePublished();

    res.json({
      status: 'success',
      message: `Project ${project.published ? 'published' : 'unpublished'}`,
      data: { project }
    });

  } catch (error) {
    console.error('Toggle published error:', error);
    res.status(500).json({
      status: 'error',
      message: 'Unable to toggle published status',
      data: null
    });
  }
});

// DELETE /api/v1/projects/:id - Delete project (admin only)
router.delete('/:id', async (req: Request, res: Response) => {
  try {
    const { id } = req.params;

    const project = await Project.findById(id);
    
    if (!project) {
      return res.status(404).json({
        status: 'error',
        message: 'Project not found',
        data: null
      });
    }

    await Project.findByIdAndDelete(id);

    res.json({
      status: 'success',
      message: 'Project deleted successfully',
      data: null
    });

  } catch (error) {
    console.error('Delete project error:', error);
    
    // Handle invalid ObjectId
    if (error.name === 'CastError') {
      return res.status(404).json({
        status: 'error',
        message: 'Project not found',
        data: null
      });
    }
    
    res.status(500).json({
      status: 'error',
      message: 'Unable to delete project',
      data: null
    });
  }
});

export default router;
